name: R5S-ImmortalWRT

on:
  repository_dispatch:
  workflow_dispatch:
  schedule:
    - cron: 0 21 * * *

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@main

    - name: Set up dependencies
      run: |
        sudo apt update
        sudo apt install -y build-essential ccache git libncurses5-dev zlib1g-dev gawk flex quilt unzip libssl-dev python3-pyelftools

    - name: Clone ImmortalWRT source
      run: |
        git clone --depth=1 https://github.com/immortalwrt/immortalwrt.git

    - name: Copy custom feeds & config
      run: |
        cp ./config/immortalwrt.feeds.conf.default immortalwrt/feeds.conf.default  # 将自定义的 feeds.conf 复制到源码目录中
        cp ./config/R5S-immortalwrt.config immortalwrt/.config  # 将自定义的 .config 复制到源码目录中

    - name: Use cachewrtbuild action
      uses: klever1988/cachewrtbuild@main
      with:
        ccache: 'true'  # 启用 ccache，加速构建
        mixkey: 'ramips'  # 设置目标平台为 R5S 使用的 ramips
        prefix: 'immortalwrt'  # 使用的源码前缀
        
    - name: Set up R5S specific configuration
      run: |
        cd immortalwrt
        git checkout
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Download package
      id: package
      run: |
        cd immortalwrt
        make defconfig
        make download -j$(nproc)

    - name: Build firmware for R5S
      run: |
        cd immortalwrt
        make -j$(nproc)

    - name: Organize files
      id: organize
      run: |
        cd immortalwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"
          
    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
        touch release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        echo "::set-output name=status::success"

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 10
        keep_minimum_runs: 10
        token: ${{ secrets.GH_TOKEN }}
